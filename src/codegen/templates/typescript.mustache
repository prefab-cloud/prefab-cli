// AUTOGENERATED CODE - DO NOT EDIT
// AUTOGENERATED with prefab-cli's gen command
import { z } from "zod";
import { Prefab, Context } from "@prefab-cloud/prefab-cloud-node";
import Mustache from 'mustache';
type ContextObj = Record<string, Record<string, unknown>>;

// Generated parameter schemas for methods that use Mustache templates
{{#accessorMethods}}
{{#paramsSchema}}
const {{paramsSchemaName}} = {{{paramsSchema}}};
{{/paramsSchema}}
{{/accessorMethods}}

export const prefabSchema = z.object({
  {{{schemaLines}}}
});

export type PrefabConfig = z.infer<typeof prefabSchema>;

export class PrefabTypesafe {
  constructor(private prefab: Prefab) { }

  get<K extends keyof PrefabConfig>(key: K, contexts?: Contexts | ContextObj): PrefabConfig[K] {
    const value = this.prefab.get(key, contexts);
    return prefabSchema.shape[key].parse(value) as PrefabConfig[K];
  }

  {{{accessorMethods}}}
}