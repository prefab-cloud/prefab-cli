import {stripIndent} from 'common-tags'
import camelCase from 'lodash.camelcase'

import {ZodToTypescriptMapper, type ZodToTypescriptMapperTarget} from '../language-mappers/zod-to-typescript-mapper.js'
import {ZodToTypescriptReturnValueMapper} from '../language-mappers/zod-to-typescript-return-value-mapper.js'
import {BaseGenerator} from './base-generator.js'

export class PythonGenerator extends BaseGenerator {
  private MUSTACHE_IMPORT = 'import pystache'

  get filename(): string {
    return 'prefab.py'
  }

  generate(): string {
    return stripIndent`
    # AUTOGENERATED by prefab-cli's 'gen' command
    import logging
    import prefab_cloud_python

    # TODO: Figure out which imports are actually needed
    from prefab_cloud_python import Client, Context, ContextDictOrContext
    from pydantic import BaseModel

    # Optional - need to make this dynamic
    from dataclasses import dataclass # for parameter classes
    from datetime import datetime # for Dates
    from datetime import timedelta # for Durations

    # TODO: Figure out which imports are actually needed based on generated code
    from typing import Any, Dict, List, Optional, Union, Tuple

    ${this.additionalDependencies().join('\n') || '# No additional dependencies required'}

    class PrefabTypedClient:
        """Client for accessing Prefab configuration with type-safe methods"""
        def __init__(self, client=None, use_global_client=False):
            """
            Initialize the typed client.

            Args:
                client: A Prefab client instance. If not provided and use_global_client is False,
                          uses the global client at initialization time.
                use_global_client: If True, dynamically calls prefab_cloud_python.get_client() for each request
                                  instead of storing a reference. Useful in long-running applications where
                                  the client might be reset or reconfigured.
            """
            self._prefab = prefab_cloud_python
            self._use_global_client = use_global_client
            self._client = None if use_global_client else (client or prefab_cloud_python.get_client())

        @property
        def client(self):
            """
            Returns the client to use for the current request.

            If use_global_client is True, dynamically retrieves the current global client.
            Otherwise, returns the stored client instance.
            """
            if self._use_global_client:
                return self._prefab.get_client()
            return self._client

      ${this.generateAccessorMethods().join('\n\n      ') || '// No methods generated'}
    `
  }

  private additionalDependencies(): string[] {
    const dependencies: string[] = []
    const hasFunctions = this.configurations().some((c) => c.hasFunction)

    if (hasFunctions) {
      dependencies.push(this.MUSTACHE_IMPORT)
    }

    return dependencies
  }

  private generateAccessorMethods(): string[] {
    const uniqueMethods: Record<string, string> = {}
    const schemaTypes = this.configurations().map((config) => {
      let methodName = camelCase(config.key)

      // If the method name starts with a digit, prefix it with an underscore to ensure method name is valid
      if (/^\d/.test(methodName)) {
        methodName = `_${methodName}`
      }

      if (uniqueMethods[methodName]) {
        throw new Error(
          `Method '${methodName}' is already registered. Prefab key ${config.key} conflicts with '${uniqueMethods[methodName]}'!`,
        )
      }

      uniqueMethods[methodName] = config.key

      if (config.configType === 'FEATURE_FLAG') {
        return stripIndent`
          get ${methodName}(): boolean {
                  return this.prefab.isEnabled('${config.key}')
                }
          `
      }

      if (config.hasFunction) {
        const returnValue = new ZodToTypescriptReturnValueMapper().resolveType(config.schema)

        return stripIndent`
          ${methodName}(): PrefabTypeGeneration.ReactHookConfigurationAccessor['${config.key}'] {
                  const raw = this.get('${config.key}')
                  return ${returnValue}
                }
          `
      }

      return stripIndent`
        get ${methodName}(): PrefabTypeGeneration.ReactHookConfigurationAccessor['${config.key}'] {
                return this.get('${config.key}')
              }
        `
    })

    return schemaTypes
  }

  private generateSchemaTypes(target: ZodToTypescriptMapperTarget = 'accessor'): string[] {
    const schemaTypes = this.configurations().map((config) => {
      const mapper = new ZodToTypescriptMapper({fieldName: config.key, target})

      return mapper.renderField(config.schema)
    })

    return schemaTypes
  }
}
