import { z } from "zod";
import { Prefab } from "@prefab-cloud/prefab-cloud-node";
import Mustache from 'mustache';

// Export all schemas as named constants
{{#schemaConfigs}}
export const {{schemaName}} = {{{zodSchema}}};
{{/schemaConfigs}}

// Generated schemas for validation
{{#schemaLines}}
const {{schemaName}} = {{{zodType}}};
{{/schemaLines}}

// Generated parameter schemas for methods that use Mustache templates
{{#accessorMethods}}
{{#paramsSchema}}
const {{paramsSchemaName}} = {{{paramsSchema}}};
{{/paramsSchema}}
{{/accessorMethods}}

export const prefabSchema = z.object({
{{#schemaLines}}
  "{{key}}": {{zodType}},
{{/schemaLines}}
});

export type PrefabConfig = z.infer<typeof prefabSchema>;

export class PrefabTypesafe {
  constructor(private prefab: Prefab) { }

  get<K extends keyof PrefabConfig>(key: K): PrefabConfig[K] {
    const value = this.prefab.get(key);
    return prefabSchema.shape[key].parse(value) as PrefabConfig[K];
  }

  {{#accessorMethods}}
  {{methodName}}(){{#isFunctionReturn}}{{#params}}: (params: {{params}}) => {{/params}}{{/isFunctionReturn}}{{^isFunctionReturn}}: {{/isFunctionReturn}}{{{returnType}}} {
    const raw = this.get('{{key}}');
    return {{{returnValue}}};
  }
  {{/accessorMethods}}
}