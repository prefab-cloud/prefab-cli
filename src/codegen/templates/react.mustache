// AUTOGENERATED CODE - DO NOT EDIT
// AUTOGENERATED with prefab-cli's gen command
import { Prefab } from "@prefab-cloud/prefab-cloud-js";
import { createPrefabHook } from "@prefab-cloud/prefab-cloud-react";
import { z } from "zod";

import Mustache from 'mustache';

const PrefabDurationSchema = z
  .object({
    seconds: z.number(),
    ms: z.number(),
  })
  .describe("PrefabDurationSchema");

type PrefabDuration = z.infer<typeof PrefabDurationSchema>;

// Generated parameter schemas for methods that use Mustache templates
{{#accessorMethods}}
{{#paramsSchema}}
const {{paramsSchemaName}} = {{{paramsSchema}}};
{{/paramsSchema}}
{{/accessorMethods}}

export const prefabSchema = z.object({
  {{{schemaLines}}}
});

export type PrefabConfig = z.infer<typeof prefabSchema>;

export class PrefabTypesafe {
  constructor(private prefab: Prefab) { }

  get<K extends keyof PrefabConfig>(key: K): PrefabConfig[K] {
    const value = this.prefab.get(key);
    return prefabSchema.shape[key].parse(value) as PrefabConfig[K];
  }

  {{{accessorMethods}}}
}

// Create a pre-typed hook specifically for PrefabTypesafe
export const usePrefabConfig = createPrefabHook(PrefabTypesafe);
