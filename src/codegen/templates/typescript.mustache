import { z } from "zod";
import { Prefab } from "@prefab-cloud/prefab-cloud-node";
import Mustache from 'mustache';

export const prefabSchema = z.object({
{{#schemaLines}}
  "{{key}}": {{{zodType}}},
{{/schemaLines}}
});

export type PrefabConfig = z.infer<typeof prefabSchema>;

export class PrefabTypesafe {
  constructor(private prefab: Prefab) { }

  get<K extends keyof PrefabConfig>(key: K): PrefabConfig[K] {
    const value = this.prefab.get(key);
    const parsed = prefabSchema.shape[key].parse(value) as PrefabConfig[K];

    if (isMustacheTemplate(parsed)) {
      return parsed.withPrefab(this) as PrefabConfig[K];
    }

    return parsed;
  }

  {{#accessorMethods}}
  {{methodName}}(): {{returnType}} {
    return this.get('{{key}}');
  }
  {{/accessorMethods}}
}

export function MustacheString<T extends z.ZodTypeAny = z.ZodObject<Record<string, never>>>(schema?: T) {
  // Use a type assertion with unknown as an intermediate step
  const actualSchema = schema || (z.object({}) as unknown as T);

  return z.string().transform((str) => {
    return new MustacheTemplate(str, actualSchema);
  });
}

export type MustacheStringType<T extends z.ZodTypeAny> = MustacheTemplate<z.infer<T>>; 


// Define a MustacheTemplate class
export class MustacheTemplate<T> {
  private prefabInstance?: PrefabTypesafe;

  constructor(
    public template: string,
    public schema: z.ZodType<T>,
    prefab?: PrefabTypesafe
  ) {
    this.prefabInstance = prefab;
  }

  // Method to bind a prefab instance to this template
  withPrefab(prefab: PrefabTypesafe): MustacheTemplate<T> {
    return new MustacheTemplate(this.template, this.schema, prefab);
  }

  compile(data: T): string {
    // Validate data against schema
    this.schema.parse(data);

    if (this.prefabInstance) {
      // Create a partials resolver that uses prefab.get()
      const partials: Record<string, string> = new Proxy({}, {
        get: (_, name: string) => {
          try {
            const config = this.prefabInstance!.get(name as keyof PrefabConfig);
            if (typeof config === 'object' && config instanceof MustacheTemplate) {
              return config.template;
            }
            return '';
          } catch (e) {
            console.warn(`Failed to load partial "${name}":`, e);
            return '';
          }
        }
      });

      return Mustache.render(this.template, data, partials);
    }

    return Mustache.render(this.template, data);
  }
}
// Helper function outside the class
function isMustacheTemplate<T>(value: unknown): value is MustacheTemplate<T> {
  return value instanceof MustacheTemplate;
}